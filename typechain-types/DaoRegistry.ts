/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DaoRegistry {
  export type DaoMetadataStruct = {
    daoName: string;
    daoLogoUrl: string;
    projectDescription: string;
  };

  export type DaoMetadataStructOutput = [string, string, string] & {
    daoName: string;
    daoLogoUrl: string;
    projectDescription: string;
  };
}

export interface DaoRegistryInterface extends utils.Interface {
  contractName: "DaoRegistry";
  functions: {
    "AI_MANAGER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "agentConfigurations(uint32)": FunctionFragment;
    "agentIds()": FunctionFragment;
    "aiAction(uint32,uint32)": FunctionFragment;
    "daoConfigurations(uint32)": FunctionFragment;
    "daoIds()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "registerAIAgent(address)": FunctionFragment;
    "registerDao(string,string,address,address,string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateDaoConfiguration(uint32,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AI_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agentConfigurations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "agentIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aiAction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoConfigurations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoIds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAIAgent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDao",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDaoConfiguration",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AI_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agentIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aiAction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAIAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDao",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDaoConfiguration",
    data: BytesLike
  ): Result;

  events: {
    "AIAction(uint32,uint32)": EventFragment;
    "AIAgentRegistered(uint32,address)": EventFragment;
    "DaoRegistered(uint32,address,string,string,string)": EventFragment;
    "DaoUpdated(uint32,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AIAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AIAgentRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type AIActionEvent = TypedEvent<
  [number, number],
  { daoId: number; agentId: number }
>;

export type AIActionEventFilter = TypedEventFilter<AIActionEvent>;

export type AIAgentRegisteredEvent = TypedEvent<
  [number, string],
  { agentId: number; agentAddress: string }
>;

export type AIAgentRegisteredEventFilter =
  TypedEventFilter<AIAgentRegisteredEvent>;

export type DaoRegisteredEvent = TypedEvent<
  [number, string, string, string, string],
  {
    daoId: number;
    contractAddress: string;
    daoName: string;
    logo: string;
    projectDescription: string;
  }
>;

export type DaoRegisteredEventFilter = TypedEventFilter<DaoRegisteredEvent>;

export type DaoUpdatedEvent = TypedEvent<
  [number, string],
  { daoId: number; projectDescription: string }
>;

export type DaoUpdatedEventFilter = TypedEventFilter<DaoUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface DaoRegistry extends BaseContract {
  contractName: "DaoRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DaoRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AI_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    agentConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, BigNumber] & {
        agentId: number;
        agentAddress: string;
        reputation: number;
        numberOfDecisions: BigNumber;
      }
    >;

    agentIds(overrides?: CallOverrides): Promise<[number]>;

    aiAction(
      _agentId: BigNumberish,
      _daoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, DaoRegistry.DaoMetadataStructOutput, string] & {
        daoId: number;
        contractAddress: string;
        daoMetadata: DaoRegistry.DaoMetadataStructOutput;
        ownerAddress: string;
      }
    >;

    daoIds(overrides?: CallOverrides): Promise<[number]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerAIAgent(
      _agentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerDao(
      _name: string,
      _logo: string,
      _owner: string,
      _contractAddress: string,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateDaoConfiguration(
      _daoId: BigNumberish,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AI_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  agentConfigurations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, BigNumber] & {
      agentId: number;
      agentAddress: string;
      reputation: number;
      numberOfDecisions: BigNumber;
    }
  >;

  agentIds(overrides?: CallOverrides): Promise<number>;

  aiAction(
    _agentId: BigNumberish,
    _daoId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoConfigurations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, DaoRegistry.DaoMetadataStructOutput, string] & {
      daoId: number;
      contractAddress: string;
      daoMetadata: DaoRegistry.DaoMetadataStructOutput;
      ownerAddress: string;
    }
  >;

  daoIds(overrides?: CallOverrides): Promise<number>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerAIAgent(
    _agentAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerDao(
    _name: string,
    _logo: string,
    _owner: string,
    _contractAddress: string,
    _projectDescryption: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateDaoConfiguration(
    _daoId: BigNumberish,
    _projectDescryption: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AI_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    agentConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, BigNumber] & {
        agentId: number;
        agentAddress: string;
        reputation: number;
        numberOfDecisions: BigNumber;
      }
    >;

    agentIds(overrides?: CallOverrides): Promise<number>;

    aiAction(
      _agentId: BigNumberish,
      _daoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, DaoRegistry.DaoMetadataStructOutput, string] & {
        daoId: number;
        contractAddress: string;
        daoMetadata: DaoRegistry.DaoMetadataStructOutput;
        ownerAddress: string;
      }
    >;

    daoIds(overrides?: CallOverrides): Promise<number>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAIAgent(
      _agentAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDao(
      _name: string,
      _logo: string,
      _owner: string,
      _contractAddress: string,
      _projectDescryption: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateDaoConfiguration(
      _daoId: BigNumberish,
      _projectDescryption: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AIAction(uint32,uint32)"(
      daoId?: BigNumberish | null,
      agentId?: BigNumberish | null
    ): AIActionEventFilter;
    AIAction(
      daoId?: BigNumberish | null,
      agentId?: BigNumberish | null
    ): AIActionEventFilter;

    "AIAgentRegistered(uint32,address)"(
      agentId?: BigNumberish | null,
      agentAddress?: string | null
    ): AIAgentRegisteredEventFilter;
    AIAgentRegistered(
      agentId?: BigNumberish | null,
      agentAddress?: string | null
    ): AIAgentRegisteredEventFilter;

    "DaoRegistered(uint32,address,string,string,string)"(
      daoId?: BigNumberish | null,
      contractAddress?: string | null,
      daoName?: null,
      logo?: null,
      projectDescription?: null
    ): DaoRegisteredEventFilter;
    DaoRegistered(
      daoId?: BigNumberish | null,
      contractAddress?: string | null,
      daoName?: null,
      logo?: null,
      projectDescription?: null
    ): DaoRegisteredEventFilter;

    "DaoUpdated(uint32,string)"(
      daoId?: BigNumberish | null,
      projectDescription?: null
    ): DaoUpdatedEventFilter;
    DaoUpdated(
      daoId?: BigNumberish | null,
      projectDescription?: null
    ): DaoUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    AI_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    agentConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    agentIds(overrides?: CallOverrides): Promise<BigNumber>;

    aiAction(
      _agentId: BigNumberish,
      _daoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoIds(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAIAgent(
      _agentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerDao(
      _name: string,
      _logo: string,
      _owner: string,
      _contractAddress: string,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDaoConfiguration(
      _daoId: BigNumberish,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AI_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agentConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agentIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aiAction(
      _agentId: BigNumberish,
      _daoId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoConfigurations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAIAgent(
      _agentAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerDao(
      _name: string,
      _logo: string,
      _owner: string,
      _contractAddress: string,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDaoConfiguration(
      _daoId: BigNumberish,
      _projectDescryption: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
